@startuml
!theme toy

package controller {
    class Ctrl08 {
        -_deviceService: DeviceService
        +Ctrl08(deviceService: DeviceService)
        +deactivateDevice(deviceId: long): boolean
    }
}

package services {
    class DeviceService {
            - _deviceRepository: DeviceRepository
            - _deviceFactory: DeviceFactoryImpl
            - _roomRepository: RoomRepository
            - _roomFactory: RoomFactoryImpl
            + DeviceService(deviceRepository: DeviceRepository, _deviceFactory: DeviceFactoryImpl,\nroomRepository: RoomRepository, roomFactory: RoomFactoryImpl)
'            + saveDevice(roomId: long, deviceDto: DeviceDTO)
'            + findAllDevices(): List<Device>
'            + findDeviceById(id : DeviceId): Optional<Device>
'            + deviceExistsById(id : DeviceId): boolean
'            + findAllDevicesByRoomId(roomId: long): Iterable<Device>
            + deactivateDevice(deviceId: long): boolean
        }
}

'package dto {
'    class DeviceDTO {
''        +name: String
''        +deviceModel: String
''        +isActive: boolean
''        +DeviceDTO(device: Device)
'    }
'
'    class DeviceMapper {
''        +Domain2DTO(device: Device): DeviceDTO
''        +Domain2DTO(devices: List<Device>): Map<DeviceDTO, Device>
'    }
'}

package domain {
package room{

class RoomFactory {
    + createRoom(roomName: RoomName, houseID: HouseID, houseFloor: Floor, dimensions: Dimensions): Room
    + createRoomName(roomName: String): RoomName
    + createRoomId(roomID: long): RoomId
    + createHouseID(houseID: long): HouseID
    + createFloor(floor: String): Floor
    + createDimensions(height: double, width: double, length: double): Dimensions
}
}

package device{
    class Device <root> {
        - _deviceId: DeviceId
        - _deviceName : DeviceName;
        - _deviceModel : DeviceModel;
        - _deviceStatus: DeviceStatus;
        - _roomId: RoomId;
        - _deviceFactory: DeviceFactoryImpl
'        # Device (roomId RoomId, deviceId: DeviceId, deviceName : DeviceName, \ndeviceModel : DeviceModel, _deviceFactory: DeviceFactoryImpl)
'        + getDeviceName(): DeviceName
'        + getDeviceModel(): DeviceModel
'        + getRoomId(): RoomId
        + getDeviceStatus(): DeviceStatus
        + deactivateDevice(): boolean
'        + identity() : DeviceId
'        + equals (obj : Object): boolean
'        + sameAs (obj : Object): boolean
    }

    class DeviceFactory{
            + createDevice(roomName RoomName, deviceName : DeviceName, deviceModel : DeviceModel)
            + createDeviceId(deviceId: long): DeviceId
            + createDeviceStatus(activated: boolean): DeviceStatus
        }
    }

}

package repository {
    class DeviceRepository {
        - _data : Map<DeviceId, Device>;
        + save (entity : Device) : Device
'        + findAll() : Iterable<Device>
        + findById(id : DeviceId) : Optional<Device>
'        + existsById(id : DeviceId) : boolean
'        + findAllByRoomId(roomId: long): Iterable<Device>
    }

        class RoomRepository {
            - _rooms: Map<RoomID, Room>
            + save(room: Room): Room
            + findAll(): Iterable<Room>
            + findByID(id: RoomID): Optional<Room>
            + ExistsByID(id: RoomID): boolean
        }
}

package valueObject{

    class DeviceId<VO>{
        - _id : long;
        + DeviceId (id : long)
        - validateArguments(id: long)
        + equals (obj : Object) : boolean
    }

    class DeviceName<VO>{
        + _name : String;
        + DeviceName (name : String)
        - validateArguments(name: String)
        + equals (obj : Object) : boolean
    }

    class DeviceModel<VO>{
        + _model : String;
        + DeviceModel (model : String)
        - validateArguments(model: String)
        + equals (obj : Object) : boolean
    }

    class DeviceStatus<VO> {
        + activated: boolean
        + DeviceStatus(activated: boolean)
        + equals (obj : Object) : boolean
    }

    class RoomId<VO>{
        - _id : long;
        + RoomId (id : long)
        - validateArguments(id: long): boolean
        + equals (obj : Object) : boolean
    }

}

Ctrl08 .down.> DeviceService: uses
DeviceService .down.> DeviceFactory: uses
DeviceService .right.> DeviceRepository: uses
DeviceService .right.> RoomRepository: uses

DeviceFactory .left.> Device: uses
'DeviceService .down.> DeviceDTO: uses
'DeviceService .down.> DeviceMapper: uses
'DeviceMapper .down.> DeviceDTO: uses

Device "1" *-- "1" RoomId : "uses"
Device "1" o-- "1" DeviceName : "uses"
Device "1" *-- "1" DeviceId : "uses"
Device "1" o-- "1" DeviceModel : "uses"
Device "1" o-- "1" DeviceStatus : "uses"

RoomFactory "1" <.. "1" RoomId : "creates"
DeviceFactory "1" <.. "1" DeviceName : "creates"
DeviceFactory "1" <.. "1" DeviceId : "creates"
DeviceFactory "1" <.. "1" DeviceModel : "creates"
DeviceFactory "1" <.. "1" DeviceStatus : "creates"


@enduml